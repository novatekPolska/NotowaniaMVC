
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
     
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/quotationStyles.css")" rel="stylesheet" />
   
    

    @model NotowaniaMVC.Application.Quotations.ViewModels.NewQuotationViewModel
      
    @using GridMvc.Html 
    @using System.IO
    
    @{
        ViewData["Title"] = "Notowania";
    }

    @ViewBag.Model

@using (Ajax.BeginForm("Add", "Quotations", new AjaxOptions { HttpMethod = "POST", InsertionMode = InsertionMode.Replace, UpdateTargetId = "target" }, new { enctype = "multipart/form-data" }))
{ 
    <script type="text/javascript">
        function test(files) { 
            var pdfhidden = document.getElementById("Pdf")
            var pdfBox = document.getElementById("pdfbox")

            pdfhidden.value = files
            var form = $('form').get(0)
            var fd = new FormData(form)
             
            $.ajax({
                type: "POST",
                url: "/Quotations/GeneratePDF",
                data: fd,
                mimeType: "multipart/form-data",
                contentType: false,
                cache: false,
                processData: false,
                success: function (data) {  
                    pdfBox.src = data  
                },
                error: function () {
                    alert('Błąd wyswietlania podglądu pliku PDF.');
                }
                })
        };


    </script>

        @Html.HiddenFor(model => model.Pdf)
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <table class="columns" style="margin-top:50px">
        <tr class="columns">
            <td class="bdTbl"> 
                <table class="columns">
                    <tr>
                        <td colspan="2" height="30px">  
                                <label for="PdfFile" class="btnSavePdf">
                                    @*<label class="btnSavePdf">*@
                                        <i class="fa fa-cloud-upload"></i>
                                        <img src="@Url.Content("~/Content/AddPdf.png")" height="40" width="40" />
                                    </label>
                                <input id="PdfFile" type="file" name="PdfFile" value="PdfFile" onchange="test(this.files)"/> 
                              
                                @ViewBag.FileStatus 
                        </td>
                    </tr> 
                    <tr class="columns">
                        <td class="columns">
                             <iframe id ="pdfbox" style="width:718px; height:700px; color:white; background-color:white" frameborder="0" ></iframe> 
                        </td>
                    </tr>
                </table> 
            </td> 
                <td class="bdTbl"> 
                    <table class="controls-row">
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">
                                            @(Html.Label("Data notowania: "))
                                        </td>
                                        <td class="columns">  
                                            @Html.TextBoxFor(model => model.QuotationDate, new { @class = "textBox form-control" } )
                                            @Html.ValidationMessageFor(model => model.QuotationDate)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Typ notowania: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.QuotationType, new SelectList(Model.QuotationTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.QuotationType)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Typ paliwa: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.FuelType, new SelectList(Model.FuelTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.FuelType)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Waluta: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.Currency, new SelectList(Model.CurrencyTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" })) 
                                        @Html.ValidationMessageFor(model => model.Currency)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Jednostka: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.Unit, new SelectList(Model.Units, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.Unit)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Cena netto minimalna: "))</td>
                                        <td class="columns">
                                        @(Html.TextBoxFor(model => model.PriceNettoMin, new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.PriceNettoMin)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Cena netto maksymalna: "))</td>
                                        <td class="columns">
                                        @(Html.TextBoxFor(model => model.PriceNettoMax, new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.PriceNettoMax)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr> 
                    </table>
                </td> 
        </tr>
        <tr class="columns">  
              <td style="column-span: all; flex-flow: wrap; justify-content: space-around; width: 100%; height: 100%; "> 
              </td>
              <td style="column-span: all; flex-flow: wrap; justify-content: space-around; width: 100%; height: 100%; "> 
                  <button class="btnAddCancel" type="reset" onclick="@Url.Action("Add", "Quotations")">
                     <img src="@Url.Content("~/Content/Cancel.png")" height="40" width="40" />
                  </button>
                  <button class="btnAddCancel" type="submit">
                      <img src="@Url.Content("~/Content/Save.png")" height="40" width="40" />
                  </button> 
              </td>    
        </tr> 
    </table>
}
     
    
    @(Html.Grid<NotowaniaMVC.Application.Quotations.ViewModels.QuotationsViewModel>(new List<NotowaniaMVC.Application.Quotations.ViewModels.QuotationsViewModel>())
                        .Columns(columns =>
                        { 
                            columns.Add(model => model.Id, true).Titled("Id");
                            columns.Add(model => model.QuotationDate).Titled("Data notowania");
                            columns.Add(model => model.QuotationTypeName).Titled("Typ notowania");
                            columns.Add(model => model.FuelTypeName).Titled("Typ paliwa");
                            columns.Add(model => model.CurrencyName).Titled("Waluta");
                            columns.Add(model => model.UnitName).Titled("Jednostka");
                            columns.Add(model => model.PriceNettoMin).Titled("Cena netto min");
                            columns.Add(model => model.PriceNettoMax).Titled("Cena netto max");
                            columns.Add(model => model.PdfPath).Titled("Pdf");

                            columns.Add().Encoded(false).Sanitized(false).SetWidth(30).RenderValueAs(o => Html.ActionLink("Edit", "Quotations", new { id = o.Id }));
                            columns.Add().Encoded(false).Sanitized(false).SetWidth(30).RenderValueAs(o => Html.ActionLink("Delete", "Quotations", new { id = o.Id }));

                        }).Selectable(true).WithPaging(5).Sortable().Named("testGrida").Filterable(true).EmptyText("Brak danych")
    )
