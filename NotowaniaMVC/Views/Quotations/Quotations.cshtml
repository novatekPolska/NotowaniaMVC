
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
     
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/quotationStyles.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/kendo/2017.3.913/jquery.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>  

    @model NotowaniaMVC.Application.Quotations.ViewModels.NewQuotationViewModel
    @using NotowaniaMVC.Application.Quotations.ViewModels
    
    @{
        ViewData["Title"] = "Notowania";
    }

    @ViewBag.Model

@using (Ajax.BeginForm("Add", "Quotations", new AjaxOptions { HttpMethod = "POST", InsertionMode = InsertionMode.Replace, UpdateTargetId = "target" }, new { enctype = "multipart/form-data" }))
{
  <script type="text/javascript">

    function showPageElement(what) {
        var obj = typeof what == 'object'
            ? what : document.getElementById(what);
      
        obj.style.display = 'block';
        return false;
    }

    function hidePageElement(what) {
        var obj = typeof what == 'object'
            ? what : document.getElementById(what);

        obj.style.display = 'none';
        return false;
    }

    function test(files) {
        var pdfhidden = document.getElementById("Pdf")
            var pdfBox = document.getElementById("pdfbox")

            pdfhidden.value = files
            var form = $('form').get(0)
            var fd = new FormData(form)
             
            $.ajax({
            type: "POST",
                url: "/Quotations/GeneratePDF",
                data: fd,
                mimeType: "multipart/form-data",
                contentType: false,
                cache: false,
                processData: false,
                success: function (data) {
                pdfBox.src = data
                },
                error: function () {
                alert('Błąd wyswietlania podglądu pliku PDF.');
            }
        })
      }; 

    function save()
    { 
        var form = $('form').get(0)
        var fd = new FormData(form)

        $.ajax({
        type: "POST",
        url: "/Quotations/Add",
        data: fd,
        mimeType: "multipart/form-data",
        contentType: false,
        cache: false,
        processData: false,
        success: function (data) {
            loadGridQuotations();
            alert('Notowanie dodane poprawnie.');
        },
        error: function () {
            alert('Błąd dodawania nowego notowania.');
        }
        })

        clearModel();
      }

    function clearModel()
    { 
        document.getElementById("QuotationDate").value = null;
        document.getElementById("QuotationType").selectedIndex = 0;
        document.getElementById("FuelType").selectedIndex = 0;
        document.getElementById("Currency").selectedIndex = 0;
        document.getElementById("Unit").selectedIndex = 0;
        document.getElementById("PriceNettoMin").value = null;
        document.getElementById("PriceNettoMax").value = null;
      }

    function clearFile()
      {
          document.getElementById("PdfFile").value = null;
          document.getElementById("pdfbox").src = "";
      }

    function saveAndClose()
    {
        save(); 
        hidePageElement('tblQuotation'); 
        clearModel(); 
        clearFile();
    }

    function loadGridQuotations()
    {  
          $.ajax({
              url: "/Quotations/GetDataForGrid",
              contentType: "application/html; charset=utf-8",
              type: "POST",
              dataType: "html",
              success: function (data) { 
                  $('#quotationsGrid').html(data);
              },
              error: function (xhr, status) { 
                   alert(status);
               }
          })   
      }

    function ajaxifyGridMvc(gridContainerSelector, successCallback) {
          $(gridContainerSelector).on("click", ".grid-header a, .grid-pager li a",
              function (event) {
                  var $grid_container = $(event.delegateTarget);
                  var baseUrl = $grid_container.attr("data-source-url");
                  var link = $(this).attr("href");
                  $.get(baseUrl + link, function (data) {
                      if (data.Status <= 0) {
                          alert(data.Message);
                          return;
                      }
                      $grid_container.html(data);
                      if ($.isFunction(successCallback))
                          successCallback();
                  });

                  return false;
              });
      }

 </script>

        @Html.HiddenFor(model => model.Pdf)
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <table class="columns" style="margin-top:50px; display:none;" id="tblQuotation">
        <tr class="columns">                                                                                                                                                                                                                                      
            <td class="bdTbl"> 
                <table class="columns">
                    <tr>
                        <td colspan="2" height="30px">  
                                <label for="PdfFile" class="btnSavePdf">
                                    @*<label class="btnSavePdf">*@
                                        <i class="fa fa-cloud-upload"></i>
                                        <img src="@Url.Content("~/Content/AddPdf.png")" height="40" width="40" />
                                    </label>
                                <input id="PdfFile" type="file" name="PdfFile" value="PdfFile" onchange="test(this.files)"/> 
                              
                                @ViewBag.FileStatus 
                        </td>
                    </tr> 
                    <tr class="columns">
                        <td class="columns"> 
                             <iframe id ="pdfbox" style="width:718px; height:700px; color:white; background-color:white" frameborder="0" ></iframe> 
                        </td>
                    </tr>
                </table> 
            </td> 
                <td class="bdTbl"> 
                    <table class="controls-row">
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">
                                            @(Html.Label("Data notowania: "))
                                        </td>
                                        <td class="columns">  
                                            @Html.TextBoxFor(model => model.QuotationDate, new { @class = "textBox form-control" } )
                                            @Html.ValidationMessageFor(model => model.QuotationDate)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Typ notowania: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.QuotationType, new SelectList(Model.QuotationTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.QuotationType)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Typ paliwa: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.FuelType, new SelectList(Model.FuelTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.FuelType)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Waluta: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.Currency, new SelectList(Model.CurrencyTypes, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" })) 
                                        @Html.ValidationMessageFor(model => model.Currency)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Jednostka: "))</td>
                                        <td class="columns">
                                        @(Html.DropDownListFor(model => model.Unit, new SelectList(Model.Units, "Key", "Value", 0), "- Wybierz -", new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.Unit)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Cena netto minimalna: "))</td>
                                        <td class="columns">
                                        @(Html.TextBoxFor(model => model.PriceNettoMin, new { @class = "textBox form-control" }))
                                       
                                        @Html.ValidationMessageFor(model => model.PriceNettoMin)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                        <tr class="columns">
                            <td class="columns">
                                <table class="columns">
                                    <tr class="columns">
                                        <td class="columns">@(Html.Label("Cena netto maksymalna: "))</td>
                                        <td class="columns">
                                        @(Html.TextBoxFor(model => model.PriceNettoMax, new { @class = "textBox form-control" }))
                                        @Html.ValidationMessageFor(model => model.PriceNettoMax)
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr> 
                    </table>
                </td> 
        </tr>
        <tr class="columns">  
              <td style="column-span: all; flex-flow: wrap; justify-content: space-around; width: 100%; height: 100%; "> 
              </td>
              <td style="column-span: all; flex-flow: wrap; justify-content: space-around; width: 100%; height: 100%; "> 
                  <button class="btnAddCancel" type="reset" onclick="hidePageElement('tblQuotation')">
                     <img src="@Url.Content("~/Content/Cancel.png")" height="40" width="40" />
                  </button>
                  <button class="btnAddCancel" type="button" onclick="save()" >
                      <img src="@Url.Content("~/Content/Save.png")"height="40" width="40" />
                  </button> 
                  <button class="btnAddCancel" type="button" onclick="saveAndClose()">
                      <img src="@Url.Content("~/Content/SaveAndClose.png")"  height="40" width="40" />
                  </button> 
              </td>    
        </tr> 
    </table>
}

<button class="btnAdd" type="button" style="margin-top:50px;" onclick="showPageElement('tblQuotation')">
    <img src="@Url.Content("~/Content/add.png")" height="25" width="25" />
</button> 
   
@Html.Action("InitialDataForPartialQuotationGrid", "Quotations")
 